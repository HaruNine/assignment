점근적 표기법의 직관적의미
O(f(n)) : g(n) <= cf(n) - 상한
 Ω(f(n)) : g(n) >= cf(n) - 하한
Θ(f(n)) : f(n) = g(n)

점화식 : 어떤 함수를 자신보다 더 작은 변수에 대한 함수와의 관계로 표현한것
– f(n) = n f(n−1)
– f(n) = f(n−1) + f(n−2) 
– f(n) = f(n/2) + n

점화식의 점근적 분석방법
1. 반복대치 : 더 작은문제에 대한 함수로 반복해서 대치해나가는 해법
2. 추정후 증명 : 결론을 추정하고 수학적 귀납법으로 이용하여 증명하는 방법
3. 마스터 정리 : 형식에 맞는 점화식의 복잡도를 바로 알수있다.

factorial(n) 함수연산 - T(n) = T(n−1) + c -> T(n) <= cn이므로 T(n)=O(n)
병합정렬 - T(n) = 2T(n/2) + n -> Θ(nlogn)

정렬 알고리즘
대부분 O(n^2)과 O(nlogn) 사이

기초적인 정렬 알고리즘 - Θ(n^2)
1. 선택정렬 : 최대원소를 찾는다 / 최대원소와 맨오른쪽원소를 교환한다
2. 버블정렬 : 최대원소를 찾아 비교하면서 점점 옆으로 미는거 - 배열이 정렬된상태일시 O(n)의 시간이 소요된다
3. 삽입정렬 : 매력적인 알고리즘 / 버블과 다르게 여분의 장치없이도 Θ(n) 수행가능

고급정렬 알고리즘 - Θ(nlogn)의 시간소요
1. 병합정렬 : 반반으로 나눠서 독립적으로 정렬후 병합하는거
2. 퀵정렬 : 분활하면서 하는거
3. 힙정렬 : 이진트리 / 맨 아래층을 제외하고는 완전히 채워져있고 맨아래층은 왼쪽부터 채워진거 / 리스트로 바꾸기가능
ㄴ최소힙 : 각노드의 값은 자신의 아들의 값보다 크지않다 / 루트는 최소값이다
ㄴk의 자식은 왼쪽-2k, 오른쪽-2k+1, 부모-k/2 

특수정렬 - 두원소를 비교하는것을 기본연산으로 하는 정렬의 하한선은  Ω(nlogn)이다 / 그러나 특수한성질을 만족하면 Θ(n)정렬도 가능하다
1. 계수정렬 : 원소들의 크기가 모두 –O(n) ~ O(n) 범위에 있을 때 / 예를 들어, 배열의 원소들이 k를 넘지 않는 자연수
2. 기수정렬 : 원소들이 모두 k 이하의 자릿수를 가졌을 때 (k: 상수)

평균 선형선택 알고리즘
평균수행시간 : Θ(n)
최악의 경우 수행시간 :  Θ(n^2)

레코드,키,검색트리
레코드 : 개체에 대해 수집된 모든 정보를 포함하고있느 저장단위
필드 : 레코드에서 각각의 정보를 나타내는 부분
검색키 : 다른레코드와 중복되지 ㅇ낳도록 각 레코드를 대표할수 있는 필드 / 하나 or 두개이상의 필드로 이루어질수있음
검색트리 : 각 노드가 규칙에 맞도록 하나씩의 키를 가지고 있다

검색트리
1. 이진검색트리(BST) : 이진검색트리의 각 노드는 키값을 하나씩 갖는다. 각노드의 키값은 모두 달라야한다 / 부모는 왼쪽보다 크고 오른쪽보다 작다

이진검색트리에서의 삽입
treeInsert(t, x) - t : 트리의 루트노드 / x : 삽입하고자하는 키
최악의 경우에도 이진트리가 균형이 잡히면 O(logn)

이진검색트리에서의 삭제 - t:루트노드 / r:삭제하고자하는 노드
1. r이 리프노드인 경우
2. r의 자식노드가 하나인경우
3. r의 자식노드가 두게인 경우
if (r이 리프 노드) then ▷ Case 1 : 그냥 r을 버린다;
else if (r의 자식이 하나만 있음) then ▷ Case 2 : r의 부모가 r의 자식을 직접 가리키도록 한다;
else ▷ Case 3 : r의 오른쪽 서브트리의 가장 작은 노드(=직후원소) s를 삭제하고, s를 r 자리에 놓는다

B-트리 - B-트리는 균형잡힌(Balanced) 다진검색트리로 다음의 성질을 만족한다
디스크의 접근 단위는 블록 / 외부 메모리
-루트를 제외한 모든 노드는 ~ k 개의 키를 갖는다
-모든 리프 노드는 같은 깊이를 가진다

저장/검색의 복잡도 (내려갈수록 빠름)
배열– O(n)
이진검색트리 – 최악의 경우 Θ(n) – 평균 Θ(logn)
균형잡힌 이진검색트리 – 최악의 경우 Θ(logn)
B-트리 – 최악의 경우 Θ(logn) – Balanced binary search tree보다 상수 인자가 작다
해시테이블 – 평균 Θ(1)

해시테이블 : 원소가 저장될 자리가 원소의 값에 의해 결정되는 자료구조 (다른건 비교함)
ㄴ매우빠른 응답을 요구하는 응용에 유용
ㄴ해시 테이블은 최소 원소를 찾는 것과 같은 작업은 지원하지 않는다

충돌 해결 - 해시 테이블의 한 주소를 놓고 두 개 이상의 원소가 자리를 다투는 것
1. 체이닝 : 같은주소로 해싱되는 원소를 모두 하나의 연결리스트로 관리 / 추가적인 연결 리스트 필요
2. 개방주소 방법 : 충돌이 일어나더라도 어떻게든 주어진  테이블 공간에서 해결한다 / 추가적인 공간이 필요하지 않다.

적재율이 우려스럽게 높아지면
1. 적재율이 높아지면 일반적으로 해시 테이블의 효율이 떨어진다
2. 일반적으로, 임계값을 미리 설정해 놓고 적재율이 임계치에 이르면 (해시 테이블의 크기를 두 배로 늘인 다음, 해시 테이블에 저장되어 있는 모든 원소를 다시 해싱하여 저장한다)

















