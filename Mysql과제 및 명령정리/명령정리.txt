데이터 정의어(DDL)====================

Panmae 라는 DB가 있으면 삭제후 만들어서 사용한다는 명령
DROP DATABASE IF EXISTS Panmae;
create database Panmae;

use Panmae;

테이블 생성
CREATE TABLE {테이블이름} ( 속성이름 / 데이터타입, 제약사항 / 기본키, 대체키, 외래키 / 데이터무결성 제약조건 정의 );

테이블 삭제
DROP TABLE {테이블이름};
> 삭제할 테이블을 참조하는 테이블이 있는경우
> 테이블 삭제가 수행되지 않음
> 관련된 외래키 제약조건을 먼저 삭제해야함

테이블 속성추가
ALTER TABLE {테이블이름} ADD {속성_이름} {데이터_타입} [NOT NULL] [DEFAULT 기본_값];
> ALTER TABLE Customer ADD C_Gaip DATE;

테이블 속성삭제
ALTER TABLE {테이블이름} DROP COLUMN {속성이름};
> ALTER TABLE Customer DROP COLUMN C_Gaip;

새로운 제약조건 추가
ALTER TABLE {테이블이름} ADD CONSTRAINT {제약조건이름} {제약조건내용};
> ALTER TABLE Customer ADD CONSTRAINT CHK_AGE CHECK(C_Age>=20);

기존 제약조건 삭제
ALTER TABLE {테이블이름} DROP CONSTRAINT {제약조건이름};
> ALTER TABLE Customer DROP CONSTRAINT CHK_AGE;

데이터 조작어(DML)====================

기본검색
SELECT [ALL | DISTINCT] {속성리스트} 
FROM {테이블리스트}; 
-> ALL : 결과 테이블이 튜플의 중복을 허용, 생략가능 / DISTINCT : ALL의 반대
> SELECT C_ID, C_Name, C_Grade FROM Customer;
> SELECT * FROM Customer; -> Customer의 모든 속성을 검색( * 사용)
> SELECT [ALL] {속성} FROM {테이블이름}; = 중복되게 모두표수, ALL생략 및 사용가능
> SELECT DISTINCT {속성} FROM {테이블이름}; = 중복되지 않게 표기, 같은내용은 한번씩만나옴

AS 키워드로 결과 테이블에서 속성의 이름을 바꾸어 출력가능
> SELECT P_Name, P_Danga AS Price FROM Product; -> P_Danga의 이름이 Price로 출력, 내용은 같음

산술식을 이용한 검색 : 속성의 값이 실제로 변경되는것은 아니고 결과 테이블에서만 계산된 결과 값이 출력됨
SELECT {속성+산술식(+-*/같은거)} FROM {테이블이름}

조건을 만족하는 데이터만 검색 : WHERE 키워드와 함께 비교연산자와 논리 연산자를 이용한 검색조건 제시
SELECT {속성} FROM {테이블이름} [WHERE 조건];
> 조건에서 문자, 날짜 값은 '' 로 묵어서 표현
> 논리연산자는 조건을 여러개 결합하거나 조건을 만족하지 않는 데이터를 검색하고자할때 사용

비교 연산자
= : 같다
<> : 다르다
<, >, <=, >= : 작다, 크다, 작거나 같다, 크거나 같다

논리 연산자
AND : 모든조건을 만족해야 검색한다
OR : 여러 조건중 한가지만 만족해도 검색한다
NOT : 조건을 만족하지 않는 것만 검색한다

LIKE를 이용한 검색 : 부분적으로 일치하는 데이터를 검색, 문자열을 이용하는 조건에만 사용가능
SELECT {속성} FROM {테이블이름} WHERE {속성} LIKE'';
> WHERE문 조건에 사용
같이 사용할수있는 기호
% : 0개 이상의 문자(문자의 내용과 개수는 상관없음)
- : 1개의 문자(문자의 내용은 상관없음)
> LIKE '데이터%' : 데이터로 시작하는 문자열 (데이터로 시작만하면 길이는 상관없음)
> LIKE '%데이터' : 데이터로 끝나는 문자열 (데이터로 끝나기만하면 길이는 상관없음)
> LIKE '%데이터%' : 데이터가 포함된 문자열
> LIKE '데이터___' : 데이터로 시작하는 6자길이의 문자열
> LIKE '__한%' : 세번째 글자가 '한' 인 문자열

NULL을 이용한 검색 (WHERE문 조건에 사용)
SELECT {속성} FROM {테이블이름} WHERE {속성} [IS NULL | IS NOT NULL];
- IS NULL : 특정 속성의 값이 널값인지를 비교
- IS NOT NULL : 특정 속성의 값이 널 값이 아닌지를비교

정렬 검색 - ORDER BY로 결과 테이블 내용을 사용자가 원하는 순서로 출력
SELECT문 이후 ORDER BY {속성} [ASC | DESC] [NULLS FIRST | NULLS LAST];
> ASC : 오름차순(기본) , DESC : 내림차순
> ASC에서 NULL값은 맨 마지막에 출력 , DESC에서 NULL값은 맨앞에 출력

집계 함수를 이용한 검색 : 개수, 합계, 평균, 최댓값, 최솟값의 계산기능
- NULL인 속성값은 제외하고 계산 ( * 사용해서 포함시킴)
- WHERE에서는 사용불가, SELECT절 이나 HAVING절에서만 가능
COUNT(속성) : 속성 값의 개수 - 모든 데이터
MAX(속성) : 속성 값의 최댓값 - 모든 데이터
MIN(속성) : 속성값의 최소값 - 모든 데이터
SUM(속성) : 속성값의 합계 - 숫자 데이터
AVG(속성) : 속성값의 평균 - 숫자 데이터
> SELECT AVG(속성) FROM {테이블이름}; > 해당 테이블의 속성의 평균

그룹별 검색 : 특정 속성의 값이 같은 튜플을 모아 그룹을 만들고, 그룹별로 검색, HAVING 키워드로 조건작성
GROUP BY {속성} [HAVING 조건];
- GROUP BY 절에 없는 속성은 SELECT절에 사용불가

여러 테이블에 대한 조인검색 : 여러개의 테입블을 연결하는 데이터를 검색하는거
- FROM절에 검색에 필요한 모든 테이블을 나열
- 형태 {속성}.{속성리스트이름}
- WHERE절에 조인속성의 값이 같아야함을 의미하는 조인조건을 제시
WHERE Order.O_Name='banana' AND Product.P_ID=Order.O_Product;
> Order안의 O_Name이 banana인 것과 두 속성이 표시하는게 같다고 해줌(조인조건)

부속 질의문
- SELECT문 안에 SELECT문 쓰는거 (상위 질의문 안에 부속 질의문)
- ORDER BY절 사용불가, 상위 질의문보다 먼저 실행됨
- 단일행부속질의문 = 하나의 행을 결과로 반환
- 다중행부속질의문 = 하나 이상의 행을 결과로 반환
- 부속 질의문과 상위 질의문을 연결하는 연산자가 필요 (단일행 = 비교연산자 사용가능, 다중행 = 비교연산자 사용불가)

다중행 부속질의문에서 사용가능한 연산자
IN : 결과값중 일치하는것이 있으면 검색조건이 참
NOT IN : 결과 값중 일치하는것이 없으면 검색조건이 참
EXISTS : 결과값이 하나라도 존재하면검색조건이 참
NOT EXISTS : 결과값이 하나도 존재하지 않으면 검색조건이 참
ALL : 결과값 모두와 비교한 결과가 참이면 검잭조건을 만족 (비교 연산자와 함께 사용)
ANY | SOME : 결과값중 하나라도 비교한 결과가 참이면 검색조건을 만족 (비교 연산자와 함께 사용)

데이터 직접 삽입 : INSERT문
INSERT 
INTO {테이블이름}[(속성리스트)]
VALUES (속성값 리스트);

부속 질의문을 이용한 데이터 삽입
INSERT
INTO {테이블이름}[(속성리스트)]
SELECT 문;

데이터 수정 : UPDATE문 - 테이블에 저장된 튜플에서 특정 속성의 값을 수정
UPDATE {테이블 이름}
SET 속성이름1=값1, ...
[WHERE 조건];
+ 부속질의문 사용가능

데이터 삭제 : DELETE문 - 테이블에 저장된 데이터를 삭제
DELETE
FROM {테이블이름}
[WHERE 조건];
> WHERE절을 생략하면 테이블에 존재하는 모든 튜플을 삭제해 빈 테이블이됨 = DROP TABLE은 테이블 자체가 사라져 서로 다름
+ 부속질의문 사용가능

뷰 : 가상 테이블 구축, 내용을 변화시키는 작업은 제한적, 논리적 데이터 테이블
CREATE VIEW {뷰 이름}[(속성 리스트)]
AS SELECT 문
[WITH CHECK OPTION];
> AS SELECT문에서 ORDER BY문 사용불가
>WITH CHECK OPTION : 뷰삽입이나 수정연산을 할때 SELECT문의 where조건에서 제시한 뷰의 정의조건을 위반하면 수행되지 않도록 하는 제약조건을 지정
> 기본키를 포함할시 변경가능

뷰 삭제
DROP VIEW {뷰이름};
> 제약조건이 존재하는 경우 -> 뷰 삭제가 수행되지 않음, 관련된 제약조건을 면저 삭제해야함

삽입 SQL문====================

삽입 SQL문
- 일반 프로그램에서 사용하기위해 앞에 EXEC SQL을 붙임
- 프로그램 안의 일반 변수를 구별하기 위해서 앞에 콜론(:)을 붙임

커서가 필요없는 삽입 sql문
- CREATE TABLE문, INSERT문, DELETE문, UPDATE문 = 결과 테이블을 반환하지 않음
- 결과로 행 하나만 반환하는 SELECT문
- 삽입 sql문에서 사용할 변수 선언은 BEGIN DECLARE SECTION과 END DECLARE SECTION 사이에 선언
- INTO 키워드를 이용하여 검색 결과를 저장할 변수 나열

커서가 필요한 삽입 SQL문
- SELECT문의 실행 결과로 여러행이검색되는 경우 필요

EXEC SQL DECLARE 커서_이름 CURSOR FOR SELECT 문;
> 커서를 사용하기전에 커서의 이름과 커서가 필요한 SELECT문을 선언

EXEC SQL OPEN 커서_이름;
> 커서에 연결된 SELECT문 실행

EXEC SQL FETCH 커서_이름 INTO 변수_리스트;
> 커서를 이동시키는 삽입 SQL문
> for, wile 문과 같은 반복문과 함께 사용
> 여러행이 사용해야되니까 FETCH문이 여러번 수행되야됨

EXEC SQL CLOSE 커서_이름;
> 커서의 사용을 종료하는 삽입 SQL문